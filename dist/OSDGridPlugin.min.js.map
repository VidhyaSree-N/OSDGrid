{"mappings":"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","sources":["src/OSDGridPlugin.js"],"sourcesContent":["/*\r\n * GridViewerPlugin.js\r\n *\r\n * Plugin for OpenSeadragon that adds Grid on OSD image\r\n *\r\n * By Vidhya Sree N and Nicholas Verrochi\r\n * For CS410 - The Axolotl Project\r\n *\r\n * Requires OpenSeadragon Fabric.js,\r\n * and the OpenSeadragon Fabric.js Overlay plugin\r\n */\r\n\r\nclass OSDGridPlugin {\r\n    /**\r\n     * APIs used by the plugin\r\n     */\r\n    viewer; // the OpenSeadragon viewer\r\n    overlay; // the fabric.js overlay, contains the canvas\r\n    fabricCanvas; // the fabric.js canvas to draw shapes on\r\n    useBuiltInUI; // when true, will setup the built-in UI after starting\r\n\r\n    /**\r\n     * Customization options\r\n     */\r\n    conversionFactor; // factor to multiply for converting from pixels\r\n    menuOptions; // options object to be passed to the built-in UI if used\r\n    units; // string to indicate what units are used, for example \"mm\"\r\n\r\n\r\n   constructor(viewer,options = {}) {\r\n    this.viewer = viewer;\r\n    this.processOptions(options);\r\n    this.overlay = viewer.fabricjsOverlay();\r\n    this.fabricCanvas = this.overlay.fabricCanvas();\r\n    this.gridGroup = new fabric.Group([], {\r\n      selectable: false,\r\n      evented: false\r\n    });\r\n\r\n    // Bind the toggleGrid, rotateGrid, and changeGridSize functions to the current instance\r\n     this.toggleGrid = this.toggleGrid.bind(this);\r\n     this.rotateGrid = this.rotateGrid.bind(this);\r\n     this.changeGridSize = this.changeGridSize.bind(this);\r\n\r\n    // Add the plugin HTML to the viewer element\r\n    this.addPluginHTML(viewer);\r\n    this.addPluginCSS(viewer);\r\n\r\n    this.addGrid(viewer);\r\n\r\n    this.viewer.addHandler('page', () => {\r\n      this.resetGridAndSlider();\r\n    });\r\n  }\r\n\r\n  resetGridAndSlider() {\r\n        const elements = [\"grid-rotation-slider\", \"grid\", \"angle-display\", \"grid-rotation-label\", \"grid-size-label\", \"grid-size-slider\", \"grid-size-value\"];\r\n        elements.forEach(element => document.getElementById(element).style.display = \"none\");\r\n        document.getElementById(\"grid\").checked = false;\r\n        document.getElementById(\"grid-rotation-slider\").value = \"0\";\r\n        document.getElementById(\"grid-size-slider\").value = \"440\";\r\n        this.gridGroup.setAngle(0);\r\n        document.getElementById(\"angle-display\").innerText = \"\";\r\n        this.gridGroup.remove(...this.gridGroup.getObjects(\"line\"));\r\n    }\r\n  /**\r\n       * processOptions:\r\n       *\r\n       * Stores customization options in the object proper\r\n       * Loads the built-in UI if chosen for use\r\n       *\r\n       * @param {Object} options\r\n       */\r\n      processOptions(options) {\r\n          if (options.conversionFactor) {\r\n              this.conversionFactor = options.conversionFactor;\r\n          }\r\n          else {\r\n              this.conversionFactor = 1;\r\n          }\r\n\r\n          if (options.units) {\r\n              this.units = options.units;\r\n          }\r\n          else {\r\n              this.units = \"px\";\r\n          }\r\n      }\r\n\r\n\r\n   // Function to toggle the grid\r\n   toggleGrid() {\r\n     var gridVisible = this.gridGroup.visible;\r\n     this.gridGroup.visible = !gridVisible;\r\n     this.fabricCanvas.renderAll();\r\n     var gridRotationAngle = document.getElementById(\"grid-rotation-slider\");\r\n     var gridToggleSwitch = document.getElementById(\"grid\");\r\n     var angleDisplay = document.getElementById(\"angle-display\");\r\n     var gridRotationLabel = document.getElementById(\"grid-rotation-label\");\r\n     var gridSizeLabel = document.getElementById(\"grid-size-label\");\r\n     var gridSizeChange = document.getElementById(\"grid-size-slider\");\r\n     var gridSizeDisplay = document.getElementById(\"grid-size-value\")\r\n     if (gridVisible) {\r\n       gridRotationAngle.style.display = \"none\";\r\n       angleDisplay.style.display = \"none\"\r\n       gridRotationLabel.style.display= \"none\";\r\n       gridSizeLabel.style.display= \"none\";\r\n       gridSizeChange.style.display= \"none\";\r\n       gridSizeDisplay.style.display= \"none\";\r\n       gridToggleSwitch.checked = false;\r\n     } else {\r\n       gridSizeLabel.style.display= \"block\";\r\n       gridSizeChange.style.display= \"block\";\r\n       gridRotationAngle.style.display = \"block\";\r\n       angleDisplay.style.display = \"block\"\r\n       gridRotationLabel.style.display= \"block\";\r\n       gridSizeDisplay.style.display= \"block\";\r\n       gridToggleSwitch.checked = true;\r\n       gridRotationLabel.innerText = \"Grid Rotation:\"\r\n       gridSizeLabel.innerText = \"Grid Size:\"\r\n     }\r\n   }\r\n\r\n  changeGridSize() {\r\n    const gridSizeSlider = document.getElementById(\"grid-size-slider\");\r\n    const gridSizeValue = document.getElementById(\"grid-size-value\");\r\n    const gridSize = parseInt(gridSizeSlider.value);\r\n    // Convert the grid size to the desired unit\r\n    const scaledGridSize = (gridSize * this.conversionFactor).toFixed(3);\r\n    gridSizeValue.innerText = scaledGridSize + this.units;\r\n    // Clear the existing grid lines\r\n    this.gridGroup.remove(...this.gridGroup.getObjects(\"line\"));\r\n\r\n    var world = this.viewer.world;\r\n    if (world) {\r\n      var imageSize = world.getItemAt(0).getContentSize();\r\n      var canvasWidth = imageSize.x;\r\n      var canvasHeight = imageSize.y;\r\n\r\n      // Calculate the diagonal length of the canvas to ensure grid lines extend beyond it\r\n      var diagonalLength = Math.sqrt(canvasWidth ** 2 + canvasHeight ** 2);\r\n\r\n      // Draw horizontal lines\r\n      for (var i = -diagonalLength; i <= diagonalLength; i += gridSize) {\r\n        var line = new fabric.Line(\r\n          [-diagonalLength, i, diagonalLength, i],\r\n          {\r\n            stroke: \"grey\",\r\n            strokeWidth: 5,\r\n          }\r\n        );\r\n        this.gridGroup.add(line);\r\n      }\r\n\r\n      // Draw vertical lines\r\n      for (var i = -diagonalLength; i <= diagonalLength; i += gridSize) {\r\n        var line = new fabric.Line([i, -diagonalLength, i, diagonalLength], {\r\n          stroke: \"grey\",\r\n          strokeWidth: 5,\r\n        });\r\n        this.gridGroup.add(line);\r\n      }\r\n\r\n    // Set the clipTo function to limit the grid to the canvas boundaries\r\n    this.gridGroup.clipTo = function (ctx) {\r\n      ctx.rect(0, 0, canvasWidth, canvasHeight);\r\n    };\r\n      this.fabricCanvas.renderAll();\r\n    }\r\n  }\r\n\r\n  // Function to rotate the grid\r\n  rotateGrid() {\r\n   var angle = document.getElementById(\"grid-rotation-slider\").value;\r\n   this.gridGroup.setAngle(angle);\r\n   var angleDisplay = document.getElementById(\"angle-display\");\r\n   angleDisplay.innerText = angle;\r\n   this.fabricCanvas.renderAll();\r\n  }\r\n\r\n   addPluginCSS(viewer){\r\n        const pluginCSS = `\r\n         body {\r\n          overflow: hidden;\r\n        }\r\n\r\n        .switch {\r\n        position: relative;\r\n        display: inline-block;\r\n        width: 50px;\r\n        height: 24px;\r\n        }\r\n\r\n        .switch input {\r\n        opacity: 0;\r\n        width: 0;\r\n        height: 0;\r\n        }\r\n\r\n        .slider {\r\n        position: absolute;\r\n        cursor: pointer;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background-color: #ccc;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        }\r\n\r\n        .slider:before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 18px;\r\n        width: 18px;\r\n        left: 3px;\r\n        bottom: 3px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        }\r\n\r\n        input:checked + .slider {\r\n        background-color: #2196F3;\r\n        }\r\n\r\n        input:focus + .slider {\r\n        box-shadow: 0 0 1px #2196F3;\r\n        }\r\n\r\n        input:checked + .slider:before {\r\n        -webkit-transform: translateX(26px);\r\n        -ms-transform: translateX(26px);\r\n        transform: translateX(26px);\r\n        }\r\n\r\n        /* Rounded sliders */\r\n        .slider.round {\r\n        border-radius: 34px;\r\n        }\r\n\r\n        .slider.round:before {\r\n        border-radius: 50%;\r\n        }\r\n\r\n        #grid-rotation {\r\n        display: none;\r\n        }\r\n\r\n        #grid-rotation.visible {\r\n        display: inline-block;\r\n        }\r\n\r\n        #grid-rotation-container {\r\n          display: none;\r\n          margin-left: 10px;\r\n        }\r\n\r\n        #grid-rotation-slider.visible {\r\n          display: inline-block;\r\n        }\r\n\r\n        #grid-rotation-label {\r\n          display: inline-block;\r\n          width: 30px;\r\n          text-align: center;\r\n          margin-left: 5px;\r\n        }\r\n\r\n        #grid-rotation-slider.visible + #grid-rotation-label {\r\n          display: inline-block;\r\n        }\r\n\r\n        #grid-rotation-slider {\r\n          display: none;\r\n        }\r\n\r\n        #info {\r\n        position: absolute;\r\n        z-index: 1000;\r\n        bottom: 0;\r\n        left: 0;\r\n        padding: 10px;\r\n        background-color: rgba(0, 0, 0, 0.7);\r\n        min-height: 5vh;\r\n        width: 8vw;\r\n        color: white;\r\n        font-family: sans-serif;\r\n        font-size: 0.9em;\r\n        }\r\n        /* Grid */\r\n        .switch {\r\n        position: relative;\r\n        display: inline-block;\r\n        width: 50px;\r\n        height: 24px;\r\n        }\r\n\r\n        .switch input {\r\n        opacity: 0;\r\n        width: 0;\r\n        height: 0;\r\n        }\r\n\r\n        .slider {\r\n        position: absolute;\r\n        cursor: pointer;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        background-color: #ccc;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        }\r\n\r\n        .slider:before {\r\n        position: absolute;\r\n        content: \"\";\r\n        height: 18px;\r\n        width: 18px;\r\n        left: 3px;\r\n        bottom: 3px;\r\n        background-color: white;\r\n        -webkit-transition: .4s;\r\n        transition: .4s;\r\n        }\r\n\r\n        input:checked + .slider {\r\n        background-color: #2196F3;\r\n        }\r\n\r\n        input:focus + .slider {\r\n        box-shadow: 0 0 1px #2196F3;\r\n        }\r\n\r\n        input:checked + .slider:before {\r\n        -webkit-transform: translateX(26px);\r\n        -ms-transform: translateX(26px);\r\n        transform: translateX(26px);\r\n        }\r\n\r\n        .slider-container {\r\n        display: flex;\r\n        align-items: center;\r\n        }\r\n\r\n        .slider-input {\r\n        width: 100px;\r\n        margin-right: 10px;\r\n        }\r\n\r\n        .slider-value {\r\n        margin: 0;\r\n        }\r\n        /* Rounded sliders */\r\n        .slider.round {\r\n        border-radius: 34px;\r\n        }\r\n\r\n        .slider.round:before {\r\n        border-radius: 50%;\r\n        }\r\n\r\n        #grid-rotation {\r\n        display: none;\r\n        }\r\n\r\n        #grid-rotation.visible {\r\n        display: inline-block;\r\n        }\r\n\r\n        #grid-rotation-container {\r\n          display: none;\r\n          margin-left: 10px;\r\n        }\r\n\r\n        #grid-rotation-slider.visible {\r\n          display: inline-block;\r\n        }\r\n\r\n        #grid-rotation-label {\r\n          display: inline-block;\r\n          text-align: left;\r\n          margin-left: 5px;\r\n        }\r\n\r\n        #grid-rotation-slider.visible + #grid-rotation-label {\r\n          display: inline-block;\r\n        }\r\n\r\n        #grid-rotation-slider {\r\n          display: none;\r\n        }\r\n\r\n        #grid-size {\r\n        display: none;\r\n        }\r\n\r\n        #grid-size.visible {\r\n        display: inline-block;\r\n        }\r\n\r\n        #grid-size-container {\r\n          display: none;\r\n          margin-left: 10px;\r\n        }\r\n\r\n        #grid-size-slider.visible {\r\n          display: inline-block;\r\n        }\r\n\r\n        #grid-size-label {\r\n         display: inline-block;\r\n          text-align: left;\r\n          margin-left: 5px;\r\n        }\r\n\r\n        #grid-size-slider.visible + #grid-size-label {\r\n          display: inline-block;\r\n        }\r\n\r\n        #grid-size-slider {\r\n          display: none;\r\n        }\r\n\r\n        #info {\r\n        position: absolute;\r\n        z-index: 1000;\r\n        bottom: 0;\r\n        left: 0;\r\n        padding: 10px;\r\n        background-color: rgba(0, 0, 0, 0.7);\r\n        min-height: 5vh;\r\n        width: 10vw;\r\n        color: white;\r\n        font-family: sans-serif;\r\n        font-size: 0.9em;\r\n        }\r\n        `;\r\n        const styleElement = document.createElement('style');\r\n        styleElement.type = 'text/css';\r\n        styleElement.appendChild(document.createTextNode(pluginCSS));\r\n        document.head.appendChild(styleElement);\r\n    }\r\n\r\n  // Function to add the plugin HTML to the viewer element\r\n  addPluginHTML(viewer) {\r\n    // Create the plugin HTML\r\n    const pluginHTML = `\r\n    <div id=\"info\">\r\n        <span>Grid</span>\r\n        <label class=\"switch\" for=\"grid\">\r\n            <input type=\"checkbox\" id=\"grid\">\r\n            <span class=\"slider round\"></span>\r\n        </label>\r\n        <p id=\"grid-rotation-label\"></p>\r\n        <div class=\"slider-container\">\r\n            <input type=\"range\" min=\"-180\" max=\"180\" value=\"0\" id=\"grid-rotation-slider\" class=\"slider-input\">\r\n            <p id=\"angle-display\" class=\"slider-value\"></p>\r\n        </div>\r\n        <p id=\"grid-size-label\"></p>\r\n        <div class=\"slider-container\">\r\n            <input type=\"range\" min=\"100\" max=\"5000\" value=\"440\" id=\"grid-size-slider\" class=\"slider-input\">\r\n            <p id=\"grid-size-value\" class=\"slider-value\" style=\"display:none\"></p>\r\n        </div>\r\n    </div>\r\n  `;\r\n\r\n    // Append the plugin HTML to the viewer element\r\n    const viewerElement = document.getElementById(viewer.element.id);\r\n    viewerElement.insertAdjacentHTML(\"beforeend\", pluginHTML);\r\n\r\n  // Attach event listeners using addEventListener\r\n  document.getElementById(\"grid-rotation-slider\").addEventListener(\"input\", this.rotateGrid);\r\n  document.getElementById(\"grid\").addEventListener(\"change\", this.toggleGrid);\r\n  document.getElementById(\"grid-size-slider\").addEventListener(\"input\", this.changeGridSize);\r\n}\r\n\r\n\r\n  addGrid() {\r\n    // Function to initialize the Grid\r\n    const init = () => {\r\n      this.viewer.addHandler(\"open\", () => {\r\n        var gridSize = 0.1 / this.conversionFactor; // Set the gridSize to 0.1 mm in pixels\r\n        var world = this.viewer.world;\r\n        if (world) {\r\n          var imageSize = world.getItemAt(0).getContentSize();\r\n          var canvasWidth = imageSize.x;\r\n          var canvasHeight = imageSize.y;\r\n\r\n          // Draw horizontal lines\r\n          for (var i = 0 ; i <= canvasHeight; i += gridSize) {\r\n              var line = new fabric.Line([0, i, canvasWidth, i], {\r\n              stroke: \"grey\",\r\n              strokeWidth: 5\r\n            });\r\n            this.gridGroup.add(line);\r\n          }\r\n\r\n          // Draw vertical lines\r\n          for (var i = 0; i <= canvasWidth; i += gridSize) {\r\n              var line = new fabric.Line([i, 0, i, canvasHeight], {\r\n              stroke: \"grey\",\r\n              strokeWidth: 5\r\n            });\r\n            this.gridGroup.add(line);\r\n          }\r\n\r\n          // Add the grid group to the overlay canvas\r\n          this.fabricCanvas.add(this.gridGroup);\r\n          this.gridGroup.visible = false;\r\n\r\n          this.changeGridSize(); // Call the changeGridSize() function\r\n        }\r\n      });\r\n\r\n      // Attach event listeners using addEventListener\r\n          document.getElementById(\"grid-rotation-slider\").addEventListener(\"input\", this.rotateGrid);\r\n          document.getElementById(\"grid\").addEventListener(\"change\", this.toggleGrid);\r\n          document.getElementById(\"grid-size-slider\").addEventListener(\"input\", this.changeGridSize);\r\n    };\r\n\r\n    // Call the initialize function when the plugin is created\r\n    init();\r\n  }\r\n}"],"names":[],"version":3,"file":"OSDGridPlugin.min.js.map"}