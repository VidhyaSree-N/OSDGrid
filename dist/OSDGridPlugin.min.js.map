{"mappings":"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","sources":["OSDGridPlugin.js"],"sourcesContent":["/*\r\n * GridViewerPlugin.js\r\n *\r\n * Plugin for OpenSeadragon that adds Grid on OSD image\r\n *\r\n * By Vidhya Sree N\r\n * For CS410 - The Axolotl Project\r\n *\r\n * Requires OpenSeadragon Fabric.js,\r\n * and the OpenSeadragon Fabric.js Overlay plugin\r\n */\r\n\r\nimport './OSDGridPlugin.css';\r\n\r\nclass GridViewerPlugin {\r\n  constructor(viewer) {\r\n    this.viewer = viewer;\r\n    this.conversionFactor = conversionFactor;\r\n    this.units = units;\r\n    this.overlay = viewer.fabricjsOverlay();\r\n    this.fabricCanvas = this.overlay.fabricCanvas();\r\n    this.gridGroup = new fabric.Group([], {\r\n      selectable: false,\r\n      evented: false\r\n    });\r\n\r\n    // Bind the toggleGrid, rotateGrid, and changeGridSize functions to the current instance\r\n     this.toggleGrid = this.toggleGrid.bind(this);\r\n     this.rotateGrid = this.rotateGrid.bind(this);\r\n     this.changeGridSize = this.changeGridSize.bind(this);\r\n\r\n    // Add the plugin HTML to the viewer element\r\n    this.addPluginHTML(viewer);\r\n\r\n    this.addGrid(viewer);\r\n\r\n    this.viewer.addHandler('page', () => {\r\n          this.resetGridAndSlider();\r\n    });\r\n  }\r\n\r\n  resetGridAndSlider() {\r\n          const elements = [\"grid-rotation-slider\", \"grid\", \"angle-display\", \"grid-rotation-label\", \"grid-size-label\", \"grid-size-slider\", \"grid-size-value\"];\r\n          elements.forEach(element => document.getElementById(element).style.display = \"none\");\r\n          document.getElementById(\"grid\").checked = false;\r\n          document.getElementById(\"grid-rotation-slider\").value = \"0\";\r\n          document.getElementById(\"grid-size-slider\").value = \"440\";\r\n          this.gridGroup.setAngle(0);\r\n          document.getElementById(\"angle-display\").innerText = \"\";\r\n          this.gridGroup.remove(...this.gridGroup.getObjects(\"line\"));\r\n      }\r\n\r\n   // Function to toggle the grid\r\n   toggleGrid() {\r\n     var gridVisible = this.gridGroup.visible;\r\n     this.gridGroup.visible = !gridVisible;\r\n     this.fabricCanvas.renderAll();\r\n     var gridRotationAngle = document.getElementById(\"grid-rotation-slider\");\r\n     var gridToggleSwitch = document.getElementById(\"grid\");\r\n     var angleDisplay = document.getElementById(\"angle-display\");\r\n     var gridRotationLabel = document.getElementById(\"grid-rotation-label\");\r\n     var gridSizeLabel = document.getElementById(\"grid-size-label\");\r\n     var gridSizeChange = document.getElementById(\"grid-size-slider\");\r\n     var gridSizeDisplay = document.getElementById(\"grid-size-value\")\r\n     if (gridVisible) {\r\n       gridRotationAngle.style.display = \"none\";\r\n       angleDisplay.style.display = \"none\"\r\n       gridRotationLabel.style.display= \"none\";\r\n       gridSizeLabel.style.display= \"none\";\r\n       gridSizeChange.style.display= \"none\";\r\n       gridSizeDisplay.style.display= \"none\";\r\n       gridToggleSwitch.checked = false;\r\n     } else {\r\n       gridSizeLabel.style.display= \"block\";\r\n       gridSizeChange.style.display= \"block\";\r\n       gridRotationAngle.style.display = \"block\";\r\n       angleDisplay.style.display = \"block\"\r\n       gridRotationLabel.style.display= \"block\";\r\n       gridSizeDisplay.style.display= \"block\";\r\n       gridToggleSwitch.checked = true;\r\n       gridRotationLabel.innerText = \"Grid Rotation:\"\r\n       gridSizeLabel.innerText = \"Grid Size:\"\r\n     }\r\n   }\r\n\r\n  changeGridSize() {\r\n    const gridSizeSlider = document.getElementById(\"grid-size-slider\");\r\n    const gridSizeValue = document.getElementById(\"grid-size-value\");\r\n    const gridSize = parseInt(gridSizeSlider.value);\r\n    gridSizeValue.innerText = gridSize/100 + \"mm\";\r\n\r\n    // Convert the grid size to the desired unit (e.g., pixels)\r\n    const scaledGridSize = gridSize;\r\n\r\n    // Clear the existing grid lines\r\n    this.gridGroup.remove(...this.gridGroup.getObjects(\"line\"));\r\n\r\n    var world = this.viewer.world;\r\n    if (world) {\r\n      var imageSize = world.getItemAt(0).getContentSize();\r\n      var canvasWidth = imageSize.x;\r\n      var canvasHeight = imageSize.y;\r\n\r\n      // Draw horizontal lines\r\n      for (var i = -(2 * canvasHeight); i < 2 * canvasHeight; i += scaledGridSize) {\r\n        var line = new fabric.Line([-(2 * canvasWidth), i, 2 * canvasWidth, i], {\r\n          stroke: \"black\",\r\n          strokeWidth: 5\r\n        });\r\n        this.gridGroup.add(line);\r\n      }\r\n\r\n      // Draw vertical lines\r\n      for (var i = -(2 * canvasHeight); i < 2 * canvasWidth; i += scaledGridSize) {\r\n        var line = new fabric.Line([i, -(2 * canvasHeight), i, 2 * canvasHeight], {\r\n          stroke: \"black\",\r\n          strokeWidth: 5\r\n        });\r\n        this.gridGroup.add(line);\r\n      }\r\n\r\n      this.fabricCanvas.renderAll();\r\n    }\r\n  }\r\n\r\n  // Function to rotate the grid\r\n  rotateGrid() {\r\n    var angle = document.getElementById(\"grid-rotation-slider\").value;\r\n    this.gridGroup.setAngle(angle);\r\n    var angleDisplay = document.getElementById(\"angle-display\");\r\n    angleDisplay.innerText = angle;\r\n    this.fabricCanvas.renderAll();\r\n  }\r\n\r\n  // Function to add the plugin HTML to the viewer element\r\n  addPluginHTML(viewer) {\r\n    // Create the plugin HTML\r\n    const pluginHTML = `\r\n    <div id=\"info\">\r\n        <span>Grid</span>\r\n        <label class=\"switch\" for=\"grid\">\r\n            <input type=\"checkbox\" id=\"grid\">\r\n            <span class=\"slider round\"></span>\r\n        </label>\r\n        <p id=\"grid-rotation-label\"></p>\r\n        <div class=\"slider-container\">\r\n            <input type=\"range\" min=\"-180\" max=\"180\" value=\"0\" id=\"grid-rotation-slider\" class=\"slider-input\">\r\n            <p id=\"angle-display\" class=\"slider-value\"></p>\r\n        </div>\r\n        <p id=\"grid-size-label\"></p>\r\n        <div class=\"slider-container\">\r\n            <input type=\"range\" min=\"100\" max=\"5000\" value=\"500\" id=\"grid-size-slider\" class=\"slider-input\">\r\n            <p id=\"grid-size-value\" class=\"slider-value\" style=\"display:none\"></p>\r\n        </div>\r\n    </div>\r\n  `;\r\n\r\n    // Append the plugin HTML to the viewer element\r\n    const viewerElement = document.getElementById(viewer.element.id);\r\n    viewerElement.insertAdjacentHTML(\"beforeend\", pluginHTML);\r\n\r\n  // Attach event listeners using addEventListener\r\n  document.getElementById(\"grid-rotation-slider\").addEventListener(\"input\", this.rotateGrid);\r\n  document.getElementById(\"grid\").addEventListener(\"change\", this.toggleGrid);\r\n  document.getElementById(\"grid-size-slider\").addEventListener(\"input\", this.changeGridSize);\r\n}\r\n\r\n\r\n  addGrid() {\r\n    // Function to initialize the Grid\r\n    const init = () => {\r\n      this.viewer.addHandler(\"open\", () => {\r\n        var gridSize = 500;\r\n        var world = this.viewer.world;\r\n        if (world) {\r\n          var imageSize = world.getItemAt(0).getContentSize();\r\n          var canvasWidth = imageSize.x;\r\n          var canvasHeight = imageSize.y;\r\n\r\n          // Draw horizontal lines\r\n          for (var i = -(2 * canvasHeight); i < 2 * canvasHeight; i += gridSize) {\r\n            var line = new fabric.Line([-(2 * canvasWidth), i, 2 * canvasWidth, i], {\r\n              stroke: \"black\",\r\n              strokeWidth: 5\r\n            });\r\n            this.gridGroup.add(line);\r\n          }\r\n\r\n          // Draw vertical lines\r\n          for (var i = -(2 * canvasHeight); i < 2 * canvasWidth; i += gridSize) {\r\n            var line = new fabric.Line([i, -(2 * canvasHeight), i, 2 * canvasHeight], {\r\n              stroke: \"black\",\r\n              strokeWidth: 5\r\n            });\r\n            this.gridGroup.add(line);\r\n          }\r\n\r\n          // Add the grid group to the overlay canvas\r\n          this.fabricCanvas.add(this.gridGroup);\r\n          this.gridGroup.visible = false;\r\n\r\n          this.changeGridSize(); // Call the changeGridSize() function\r\n        }\r\n      });\r\n\r\n      // Attach event listeners using addEventListener\r\n          document.getElementById(\"grid-rotation-slider\").addEventListener(\"input\", this.rotateGrid);\r\n          document.getElementById(\"grid\").addEventListener(\"change\", this.toggleGrid);\r\n          document.getElementById(\"grid-size-slider\").addEventListener(\"input\", this.changeGridSize);\r\n    };\r\n\r\n    // Call the initialize function when the plugin is created\r\n    init();\r\n  }\r\n}"],"names":[],"version":3,"file":"OSDGridPlugin.min.js.map"}